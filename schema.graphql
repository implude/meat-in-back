# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

input CreateInitialUserInput {
  name: String
  email: String
  password: String
}

type Mutation {
  createInitialUser(
    data: CreateInitialUserInput!
  ): UserAuthenticationWithPasswordSuccess!
  authenticateUserWithPassword(
    email: String!
    password: String!
  ): UserAuthenticationWithPasswordResult!
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createBadge(data: BadgeCreateInput!): Badge
  createBadges(data: [BadgeCreateInput!]!): [Badge]
  updateBadge(where: BadgeWhereUniqueInput!, data: BadgeUpdateInput!): Badge
  updateBadges(data: [BadgeUpdateArgs!]!): [Badge]
  deleteBadge(where: BadgeWhereUniqueInput!): Badge
  deleteBadges(where: [BadgeWhereUniqueInput!]!): [Badge]
  createPost(data: PostCreateInput!): Post
  createPosts(data: [PostCreateInput!]!): [Post]
  updatePost(where: PostWhereUniqueInput!, data: PostUpdateInput!): Post
  updatePosts(data: [PostUpdateArgs!]!): [Post]
  deletePost(where: PostWhereUniqueInput!): Post
  deletePosts(where: [PostWhereUniqueInput!]!): [Post]
  createDifficulty(data: DifficultyCreateInput!): Difficulty
  createDifficulties(data: [DifficultyCreateInput!]!): [Difficulty]
  updateDifficulty(
    where: DifficultyWhereUniqueInput!
    data: DifficultyUpdateInput!
  ): Difficulty
  updateDifficulties(data: [DifficultyUpdateArgs!]!): [Difficulty]
  deleteDifficulty(where: DifficultyWhereUniqueInput!): Difficulty
  deleteDifficulties(where: [DifficultyWhereUniqueInput!]!): [Difficulty]
  createRecipe(data: RecipeCreateInput!): Recipe
  createRecipes(data: [RecipeCreateInput!]!): [Recipe]
  updateRecipe(where: RecipeWhereUniqueInput!, data: RecipeUpdateInput!): Recipe
  updateRecipes(data: [RecipeUpdateArgs!]!): [Recipe]
  deleteRecipe(where: RecipeWhereUniqueInput!): Recipe
  deleteRecipes(where: [RecipeWhereUniqueInput!]!): [Recipe]
  createComment(data: CommentCreateInput!): Comment
  createComments(data: [CommentCreateInput!]!): [Comment]
  updateComment(
    where: CommentWhereUniqueInput!
    data: CommentUpdateInput!
  ): Comment
  updateComments(data: [CommentUpdateArgs!]!): [Comment]
  deleteComment(where: CommentWhereUniqueInput!): Comment
  deleteComments(where: [CommentWhereUniqueInput!]!): [Comment]
  endSession: Boolean!
}

union AuthenticatedItem = User

union UserAuthenticationWithPasswordResult =
    UserAuthenticationWithPasswordSuccess
  | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  message: String!
}

type User {
  id: ID!
  name: String
  photo: String
  email: String
  password: PasswordState
  uploaded_posts(
    where: PostWhereInput! = {}
    orderBy: [PostOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Post!]
  uploaded_postsCount(where: PostWhereInput! = {}): Int
  uploaded_recipe(
    where: RecipeWhereInput! = {}
    orderBy: [RecipeOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Recipe!]
  uploaded_recipeCount(where: RecipeWhereInput! = {}): Int
  rep_badge: Badge
  badge_list(
    where: BadgeWhereInput! = {}
    orderBy: [BadgeOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Badge!]
  badge_listCount(where: BadgeWhereInput! = {}): Int
  hearted_post(
    where: PostWhereInput! = {}
    orderBy: [PostOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Post!]
  hearted_postCount(where: PostWhereInput! = {}): Int
  hearted_recipe(
    where: RecipeWhereInput! = {}
    orderBy: [RecipeOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Recipe!]
  hearted_recipeCount(where: RecipeWhereInput! = {}): Int
  uploaded_comment(
    where: CommentWhereInput! = {}
    orderBy: [CommentOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Comment!]
  uploaded_commentCount(where: CommentWhereInput! = {}): Int
}

type PasswordState {
  isSet: Boolean!
}

input UserWhereUniqueInput {
  id: ID
  email: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  name: StringFilter
  photo: StringFilter
  email: StringFilter
  uploaded_posts: PostManyRelationFilter
  uploaded_recipe: RecipeManyRelationFilter
  rep_badge: BadgeWhereInput
  badge_list: BadgeManyRelationFilter
  hearted_post: PostManyRelationFilter
  hearted_recipe: RecipeManyRelationFilter
  uploaded_comment: CommentManyRelationFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input PostManyRelationFilter {
  every: PostWhereInput
  some: PostWhereInput
  none: PostWhereInput
}

input RecipeManyRelationFilter {
  every: RecipeWhereInput
  some: RecipeWhereInput
  none: RecipeWhereInput
}

input BadgeManyRelationFilter {
  every: BadgeWhereInput
  some: BadgeWhereInput
  none: BadgeWhereInput
}

input CommentManyRelationFilter {
  every: CommentWhereInput
  some: CommentWhereInput
  none: CommentWhereInput
}

input UserOrderByInput {
  id: OrderDirection
  name: OrderDirection
  photo: OrderDirection
  email: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input UserUpdateInput {
  name: String
  photo: String
  email: String
  password: String
  uploaded_posts: PostRelateToManyForUpdateInput
  uploaded_recipe: RecipeRelateToManyForUpdateInput
  rep_badge: BadgeRelateToOneForUpdateInput
  badge_list: BadgeRelateToManyForUpdateInput
  hearted_post: PostRelateToManyForUpdateInput
  hearted_recipe: RecipeRelateToManyForUpdateInput
  uploaded_comment: CommentRelateToManyForUpdateInput
}

input PostRelateToManyForUpdateInput {
  disconnect: [PostWhereUniqueInput!]
  set: [PostWhereUniqueInput!]
  create: [PostCreateInput!]
  connect: [PostWhereUniqueInput!]
}

input RecipeRelateToManyForUpdateInput {
  disconnect: [RecipeWhereUniqueInput!]
  set: [RecipeWhereUniqueInput!]
  create: [RecipeCreateInput!]
  connect: [RecipeWhereUniqueInput!]
}

input BadgeRelateToOneForUpdateInput {
  create: BadgeCreateInput
  connect: BadgeWhereUniqueInput
  disconnect: Boolean
}

input BadgeRelateToManyForUpdateInput {
  disconnect: [BadgeWhereUniqueInput!]
  set: [BadgeWhereUniqueInput!]
  create: [BadgeCreateInput!]
  connect: [BadgeWhereUniqueInput!]
}

input CommentRelateToManyForUpdateInput {
  disconnect: [CommentWhereUniqueInput!]
  set: [CommentWhereUniqueInput!]
  create: [CommentCreateInput!]
  connect: [CommentWhereUniqueInput!]
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  name: String
  photo: String
  email: String
  password: String
  uploaded_posts: PostRelateToManyForCreateInput
  uploaded_recipe: RecipeRelateToManyForCreateInput
  rep_badge: BadgeRelateToOneForCreateInput
  badge_list: BadgeRelateToManyForCreateInput
  hearted_post: PostRelateToManyForCreateInput
  hearted_recipe: RecipeRelateToManyForCreateInput
  uploaded_comment: CommentRelateToManyForCreateInput
}

input PostRelateToManyForCreateInput {
  create: [PostCreateInput!]
  connect: [PostWhereUniqueInput!]
}

input RecipeRelateToManyForCreateInput {
  create: [RecipeCreateInput!]
  connect: [RecipeWhereUniqueInput!]
}

input BadgeRelateToOneForCreateInput {
  create: BadgeCreateInput
  connect: BadgeWhereUniqueInput
}

input BadgeRelateToManyForCreateInput {
  create: [BadgeCreateInput!]
  connect: [BadgeWhereUniqueInput!]
}

input CommentRelateToManyForCreateInput {
  create: [CommentCreateInput!]
  connect: [CommentWhereUniqueInput!]
}

type Badge {
  id: ID!
  image: String
  label: String
  description: String
  owner: User
}

input BadgeWhereUniqueInput {
  id: ID
}

input BadgeWhereInput {
  AND: [BadgeWhereInput!]
  OR: [BadgeWhereInput!]
  NOT: [BadgeWhereInput!]
  id: IDFilter
  image: StringFilter
  label: StringFilter
  description: StringFilter
  owner: UserWhereInput
}

input BadgeOrderByInput {
  id: OrderDirection
  image: OrderDirection
  label: OrderDirection
  description: OrderDirection
}

input BadgeUpdateInput {
  image: String
  label: String
  description: String
  owner: UserRelateToOneForUpdateInput
}

input UserRelateToOneForUpdateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
}

input BadgeUpdateArgs {
  where: BadgeWhereUniqueInput!
  data: BadgeUpdateInput!
}

input BadgeCreateInput {
  image: String
  label: String
  description: String
  owner: UserRelateToOneForCreateInput
}

input UserRelateToOneForCreateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

type Post {
  id: ID!
  title: String
  content: Post_content_Document
  author: User
  hearted_user: User
  linked_recipe: Recipe
  comment: Comment
}

type Post_content_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

input PostWhereUniqueInput {
  id: ID
}

input PostWhereInput {
  AND: [PostWhereInput!]
  OR: [PostWhereInput!]
  NOT: [PostWhereInput!]
  id: IDFilter
  title: StringFilter
  author: UserWhereInput
  hearted_user: UserWhereInput
  linked_recipe: RecipeWhereInput
  comment: CommentWhereInput
}

input PostOrderByInput {
  id: OrderDirection
  title: OrderDirection
}

input PostUpdateInput {
  title: String
  content: JSON
  author: UserRelateToOneForUpdateInput
  hearted_user: UserRelateToOneForUpdateInput
  linked_recipe: RecipeRelateToOneForUpdateInput
  comment: CommentRelateToOneForUpdateInput
}

input RecipeRelateToOneForUpdateInput {
  create: RecipeCreateInput
  connect: RecipeWhereUniqueInput
  disconnect: Boolean
}

input CommentRelateToOneForUpdateInput {
  create: CommentCreateInput
  connect: CommentWhereUniqueInput
  disconnect: Boolean
}

input PostUpdateArgs {
  where: PostWhereUniqueInput!
  data: PostUpdateInput!
}

input PostCreateInput {
  title: String
  content: JSON
  author: UserRelateToOneForCreateInput
  hearted_user: UserRelateToOneForCreateInput
  linked_recipe: RecipeRelateToOneForCreateInput
  comment: CommentRelateToOneForCreateInput
}

input RecipeRelateToOneForCreateInput {
  create: RecipeCreateInput
  connect: RecipeWhereUniqueInput
}

input CommentRelateToOneForCreateInput {
  create: CommentCreateInput
  connect: CommentWhereUniqueInput
}

type Difficulty {
  id: ID!
  label: String
  numeric_level: Int
}

input DifficultyWhereUniqueInput {
  id: ID
}

input DifficultyWhereInput {
  AND: [DifficultyWhereInput!]
  OR: [DifficultyWhereInput!]
  NOT: [DifficultyWhereInput!]
  id: IDFilter
  label: StringFilter
  numeric_level: IntFilter
}

input IntFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntFilter
}

input DifficultyOrderByInput {
  id: OrderDirection
  label: OrderDirection
  numeric_level: OrderDirection
}

input DifficultyUpdateInput {
  label: String
  numeric_level: Int
}

input DifficultyUpdateArgs {
  where: DifficultyWhereUniqueInput!
  data: DifficultyUpdateInput!
}

input DifficultyCreateInput {
  label: String
  numeric_level: Int
}

type Recipe {
  id: ID!
  thumbnail: String
  name: String
  description: String
  author: User
  duration: Int
  difficulty: Difficulty
  hearted_user(
    where: UserWhereInput! = {}
    orderBy: [UserOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [User!]
  hearted_userCount(where: UserWhereInput! = {}): Int
  youtube: String
  ingredient: JSON
  linked_post(
    where: PostWhereInput! = {}
    orderBy: [PostOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Post!]
  linked_postCount(where: PostWhereInput! = {}): Int
}

input RecipeWhereUniqueInput {
  id: ID
}

input RecipeWhereInput {
  AND: [RecipeWhereInput!]
  OR: [RecipeWhereInput!]
  NOT: [RecipeWhereInput!]
  id: IDFilter
  thumbnail: StringFilter
  name: StringFilter
  description: StringFilter
  author: UserWhereInput
  duration: IntFilter
  difficulty: DifficultyWhereInput
  hearted_user: UserManyRelationFilter
  youtube: StringFilter
  linked_post: PostManyRelationFilter
}

input UserManyRelationFilter {
  every: UserWhereInput
  some: UserWhereInput
  none: UserWhereInput
}

input RecipeOrderByInput {
  id: OrderDirection
  thumbnail: OrderDirection
  name: OrderDirection
  description: OrderDirection
  duration: OrderDirection
  youtube: OrderDirection
}

input RecipeUpdateInput {
  thumbnail: String
  name: String
  description: String
  author: UserRelateToOneForUpdateInput
  duration: Int
  difficulty: DifficultyRelateToOneForUpdateInput
  hearted_user: UserRelateToManyForUpdateInput
  youtube: String
  ingredient: JSON
  linked_post: PostRelateToManyForUpdateInput
}

input DifficultyRelateToOneForUpdateInput {
  create: DifficultyCreateInput
  connect: DifficultyWhereUniqueInput
  disconnect: Boolean
}

input UserRelateToManyForUpdateInput {
  disconnect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  create: [UserCreateInput!]
  connect: [UserWhereUniqueInput!]
}

input RecipeUpdateArgs {
  where: RecipeWhereUniqueInput!
  data: RecipeUpdateInput!
}

input RecipeCreateInput {
  thumbnail: String
  name: String
  description: String
  author: UserRelateToOneForCreateInput
  duration: Int
  difficulty: DifficultyRelateToOneForCreateInput
  hearted_user: UserRelateToManyForCreateInput
  youtube: String
  ingredient: JSON
  linked_post: PostRelateToManyForCreateInput
}

input DifficultyRelateToOneForCreateInput {
  create: DifficultyCreateInput
  connect: DifficultyWhereUniqueInput
}

input UserRelateToManyForCreateInput {
  create: [UserCreateInput!]
  connect: [UserWhereUniqueInput!]
}

type Comment {
  id: ID!
  content: String
  author: User
  post: Post
}

input CommentWhereUniqueInput {
  id: ID
}

input CommentWhereInput {
  AND: [CommentWhereInput!]
  OR: [CommentWhereInput!]
  NOT: [CommentWhereInput!]
  id: IDFilter
  content: StringFilter
  author: UserWhereInput
  post: PostWhereInput
}

input CommentOrderByInput {
  id: OrderDirection
  content: OrderDirection
}

input CommentUpdateInput {
  content: String
  author: UserRelateToOneForUpdateInput
  post: PostRelateToOneForUpdateInput
}

input PostRelateToOneForUpdateInput {
  create: PostCreateInput
  connect: PostWhereUniqueInput
  disconnect: Boolean
}

input CommentUpdateArgs {
  where: CommentWhereUniqueInput!
  data: CommentUpdateInput!
}

input CommentCreateInput {
  content: String
  author: UserRelateToOneForCreateInput
  post: PostRelateToOneForCreateInput
}

input PostRelateToOneForCreateInput {
  create: PostCreateInput
  connect: PostWhereUniqueInput
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON
  @specifiedBy(
    url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf"
  )

type Query {
  authenticatedItem: AuthenticatedItem
  users(
    where: UserWhereInput! = {}
    orderBy: [UserOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [User!]
  user(where: UserWhereUniqueInput!): User
  usersCount(where: UserWhereInput! = {}): Int
  badges(
    where: BadgeWhereInput! = {}
    orderBy: [BadgeOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Badge!]
  badge(where: BadgeWhereUniqueInput!): Badge
  badgesCount(where: BadgeWhereInput! = {}): Int
  posts(
    where: PostWhereInput! = {}
    orderBy: [PostOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Post!]
  post(where: PostWhereUniqueInput!): Post
  postsCount(where: PostWhereInput! = {}): Int
  difficulties(
    where: DifficultyWhereInput! = {}
    orderBy: [DifficultyOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Difficulty!]
  difficulty(where: DifficultyWhereUniqueInput!): Difficulty
  difficultiesCount(where: DifficultyWhereInput! = {}): Int
  recipes(
    where: RecipeWhereInput! = {}
    orderBy: [RecipeOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Recipe!]
  recipe(where: RecipeWhereUniqueInput!): Recipe
  recipesCount(where: RecipeWhereInput! = {}): Int
  comments(
    where: CommentWhereInput! = {}
    orderBy: [CommentOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Comment!]
  comment(where: CommentWhereUniqueInput!): Comment
  commentsCount(where: CommentWhereInput! = {}): Int
  keystone: KeystoneMeta!
}

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  enableSignout: Boolean!
  enableSessionItem: Boolean!
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  isOrderable: Boolean!
  isFilterable: Boolean!
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum QueryMode {
  default
  insensitive
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
