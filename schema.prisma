// This file is automatically generated by Keystone, do not modify it manually.
// Modify your Keystone config when you want to change this.

datasource sqlite {
  url      = env("DATABASE_URL")
  provider = "sqlite"
}

generator client {
  provider   = "prisma-client-js"
  output     = "node_modules/.prisma/client"
  engineType = "binary"
}

model User {
  id               String    @id @default(cuid())
  name             String    @default("")
  photo            String    @default("")
  email            String    @unique @default("")
  password         String
  uploaded_posts   Post[]    @relation("Post_author")
  uploaded_recipe  Recipe[]  @relation("Recipe_author")
  rep_badge        Badge?    @relation("User_rep_badge", fields: [rep_badgeId], references: [id])
  rep_badgeId      String?   @map("rep_badge")
  badge_list       Badge[]   @relation("Badge_owner")
  hearted_post     Post[]    @relation("Post_hearted_user_User_hearted_post")
  hearted_recipe   Recipe[]  @relation("Recipe_hearted_user_User_hearted_recipe")
  uploaded_comment Comment[] @relation("Comment_author")
  created_at       DateTime? @updatedAt

  @@index([rep_badgeId])
}

model Badge {
  id                  String  @id @default(cuid())
  image               String  @default("")
  label               String  @default("")
  description         String  @default("")
  owner               User?   @relation("Badge_owner", fields: [ownerId], references: [id])
  ownerId             String? @map("owner")
  from_User_rep_badge User[]  @relation("User_rep_badge")

  @@index([ownerId])
}

model Post {
  id              String    @id @default(cuid())
  title           String    @default("")
  photo           String?
  content         String    @default("[{\"type\":\"paragraph\",\"children\":[{\"text\":\"\"}]}]")
  author          User?     @relation("Post_author", fields: [authorId], references: [id])
  authorId        String?   @map("author")
  hearted_user    User[]    @relation("Post_hearted_user_User_hearted_post")
  linked_recipe   Recipe?   @relation("Post_linked_recipe", fields: [linked_recipeId], references: [id])
  linked_recipeId String?   @map("linked_recipe")
  comment         Comment[] @relation("Comment_post")
  created_at      DateTime? @updatedAt

  @@index([authorId])
  @@index([linked_recipeId])
}

model Difficulty {
  id                     String   @id @default(cuid())
  label                  String   @default("")
  numeric_level          Int
  from_Recipe_difficulty Recipe[] @relation("Recipe_difficulty")
}

model Recipe {
  id           String      @id @default(cuid())
  thumbnail    String      @default("")
  name         String      @default("")
  description  String      @default("")
  author       User?       @relation("Recipe_author", fields: [authorId], references: [id])
  authorId     String?     @map("author")
  duration     Int
  difficulty   Difficulty? @relation("Recipe_difficulty", fields: [difficultyId], references: [id])
  difficultyId String?     @map("difficulty")
  hearted_user User[]      @relation("Recipe_hearted_user_User_hearted_recipe")
  youtube      String      @default("")
  ingredient   String?
  linked_post  Post[]      @relation("Post_linked_recipe")
  created_at   DateTime?   @updatedAt

  @@index([authorId])
  @@index([difficultyId])
}

model Comment {
  id         String    @id @default(cuid())
  content    String    @default("")
  author     User?     @relation("Comment_author", fields: [authorId], references: [id])
  authorId   String?   @map("author")
  post       Post?     @relation("Comment_post", fields: [postId], references: [id])
  postId     String?   @map("post")
  created_at DateTime? @updatedAt

  @@index([authorId])
  @@index([postId])
}